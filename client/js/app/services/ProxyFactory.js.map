{"version":3,"sources":["../../app-es6/services/ProxyFactory.js"],"names":["ProxyFactory","objeto","props","acao","Proxy","get","target","prop","receiver","includes","_ehFuncao","console","log","retorno","Reflect","apply","arguments","set","value","func","Function"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;oCAAaA,Y;;;;;;;2CACKC,M,EAAQC,K,EAAOC,I,EAAM;AAC/B,+BAAO,IAAIC,KAAJ,CAAUH,MAAV,EAAkB;AAErBI,+BAFqB,eAEjBC,MAFiB,EAETC,IAFS,EAEHC,QAFG,EAEO;AACxB;AACA;AACA;AACA,oCAAIN,MAAMO,QAAN,CAAeF,IAAf,KAAwBP,aAAaU,SAAb,CAAuBJ,OAAOC,IAAP,CAAvB,CAA5B,EAAkE;;AAE9D,2CAAO,YAAY;AACfI,gDAAQC,GAAR,iBAAuBL,IAAvB;AACA;AACA,4CAAIM,UAAUC,QAAQC,KAAR,CAAcT,OAAOC,IAAP,CAAd,EAA4BD,MAA5B,EAAoCU,SAApC,CAAd;AACA;AACAb,6CAAKG,MAAL;AACA;AACA;AACA,+CAAOO,OAAP;AACH,qCATD;AAUH;AACD,uCAAOC,QAAQT,GAAR,CAAYC,MAAZ,EAAoBC,IAApB,EAA0BC,QAA1B,CAAP;AACH,6BApBoB;AAsBrBS,+BAtBqB,eAsBjBX,MAtBiB,EAsBTC,IAtBS,EAsBHW,KAtBG,EAsBIV,QAtBJ,EAsBc;AAC/B,oCAAIK,UAAUC,QAAQG,GAAR,CAAYX,MAAZ,EAAoBC,IAApB,EAA0BW,KAA1B,EAAiCV,QAAjC,CAAd;AACA,oCAAGN,MAAMO,QAAN,CAAeF,IAAf,CAAH,EAAyBJ,KAAKG,MAAL,EAFM,CAEW;AAC1C,uCAAOO,OAAP;AAEH;AA3BoB,yBAAlB,CAAP;AA6BH;;;8CAEgBM,I,EAAM;;AAEnB,+BAAO,QAAOA,IAAP,yCAAOA,IAAP,cAAuBC,QAAvB,yCAAuBA,QAAvB,EAAP;AAEH","file":"ProxyFactory.js","sourcesContent":["export class ProxyFactory {\n    static create(objeto, props, acao) {\n        return new Proxy(objeto, {\n            // Ao dar o get em uma propriedade de um objeto (que também pode ser uma função), é executado o método get abaixo\n            get(target, prop, receiver) {\n                // caso o objeto tenha a propriedade invocada nas 'props', passadas na criação da próxy,\n                // e a mesma seja uma função, executar este método(propriedade) invocado, além de dar o update na view com o método no Bind,\n                // que seria o parâmentro 'acao' com o argumento da model(target)\n                if (props.includes(prop) && ProxyFactory._ehFuncao(target[prop])) {\n\n                    return function () {\n                        console.log(`método '${prop}' interceptado`);\n                        // pega a proprieadade da model, a model, e os argumentos da propriedade e executam o método no contexto da model(target)\n                        let retorno = Reflect.apply(target[prop], target, arguments);\n                        // executa o update da view passando a model\n                        acao(target);\n                        // retorna o método perfeitamente configurado, que será executado normalmente com seu contexto model(target)\n                        // a diferença é que foi executado o view.update(model) para atualizar a view automaticamente, além de exibir algo no console\n                        return retorno;\n                    }\n                }\n                return Reflect.get(target, prop, receiver);\n            },\n\n            set(target, prop, value, receiver) {\n                let retorno = Reflect.set(target, prop, value, receiver);\n                if(props.includes(prop)) acao(target);    // só executa acao(target) se for uma propriedade monitorada\n                return retorno; \n                \n            }\n        })\n    }\n\n    static _ehFuncao(func) {\n\n        return typeof(func) == typeof(Function);\n    \n    }\n}"]}