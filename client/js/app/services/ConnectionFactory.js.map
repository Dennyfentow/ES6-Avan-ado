{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","version","dbName","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement","Reflect","apply"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAIIA,kB,GAAS,CAAC,aAAD,C;AACTC,mB,GAAU,C;AACVC,kB,GAAS,Y;AACTC,sB,GAAa,I;AACbC,iB,GAAQ,I;;yCAECC,iB;AACT,6CAAc;AAAA;;AACV,0BAAM,IAAIC,KAAJ,CAAU,yDAAV,CAAN;AACH;;;;oDACsB;AACnB,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,gCAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBX,MAAtB,EAA8BD,OAA9B,CAAlB;;AAEAS,wCAAYI,eAAZ,GAA8B,aAAK;AAC/BT,kDAAkBU,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AACH,6BAFD;;AAIAR,wCAAYS,SAAZ,GAAwB,aAAK;AACzB,oCAAI,CAAChB,UAAL,EAAiB;AACbA,iDAAaa,EAAEC,MAAF,CAASC,MAAtB;AACA;AACAd,4CAAQD,WAAWC,KAAnB,CAHa,CAGa;AAC1BD,+CAAWC,KAAX,GAAmB,YAAY;AAC3B,8CAAM,IAAIE,KAAJ,CAAU,6CAAV,CAAN;AACH,qCAFD;AAGH;AACDE,wCAAQL,UAAR;AACH,6BAVD;;AAYAO,wCAAYU,OAAZ,GAAsB,aAAK;AACvBC,wCAAQC,GAAR,CAAYN,EAAEC,MAAF,CAASM,KAArB;;AAEAd,uCAAOO,EAAEC,MAAF,CAASM,KAAT,CAAeC,IAAtB;AACH,6BAJD;AAKH,yBAxBM,CAAP;AAyBH;;;kDAEoBrB,U,EAAY;AAC7BH,+BAAOyB,OAAP,CAAe,iBAAS;;AAEpB,gCAAItB,WAAWuB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAJ,EACIzB,WAAW0B,iBAAX,CAA6BD,KAA7B;;AAEJzB,uCAAW2B,iBAAX,CAA6BF,KAA7B,EAAoC,EAAEG,eAAe,IAAjB,EAApC;AACH,yBAND;AAQH;;;sDAEwB;AACrB,4BAAI5B,UAAJ,EAAgB;AACZ;AACA6B,oCAAQC,KAAR,CAAc7B,KAAd,EAAqBD,UAArB,EAAiC,EAAjC,EAFY,CAE0B;AACtCA,yCAAa,IAAb;AACH;AACJ","file":"ConnectionFactory.js","sourcesContent":["// Module Pattern da Classe Connection Factory transformando todo o código em um módulo,\n//  de modo a permitir o retorno da mesma conexão na variavel connection\n// var ConnectionFactory = (function () { // CASO EU DESEJASSE UTILIZAR UM MODULE PATTERN GLOBAL COM O VAR\n\nlet stores = ['negociacoes'];\nlet version = 4;\nlet dbName = 'aluraframe';\nlet connection = null; // permissão do retorno da mesma conexão sempre\nlet close = null;\n\nexport class ConnectionFactory {\n    constructor() {\n        throw new Error('Não é possível criar uma instancia de ConnectionFactory');\n    }\n    static getConnection() {\n        return new Promise((resolve, reject) => {\n            let openRequest = window.indexedDB.open(dbName, version);\n\n            openRequest.onupgradeneeded = e => {\n                ConnectionFactory._createStores(e.target.result);\n            };\n\n            openRequest.onsuccess = e => {\n                if (!connection) {\n                    connection = e.target.result;\n                    // close = connection.close.bind(connection);\n                    close = connection.close; // usando o Reflect.apply\n                    connection.close = function () {\n                        throw new Error('Você não pode fechar diretamente a conexão!');\n                    }\n                }\n                resolve(connection);\n            };\n\n            openRequest.onerror = e => {\n                console.log(e.target.error);\n\n                reject(e.target.error.name);\n            };\n        })\n    }\n\n    static _createStores(connection) {\n        stores.forEach(store => {\n\n            if (connection.objectStoreNames.contains(store))\n                connection.deleteObjectStore(store);\n\n            connection.createObjectStore(store, { autoIncrement: true });\n        });\n\n    }\n\n    static closeConnection() {\n        if (connection) {\n            // close(); // usar este por ja estar usando o método 'bind'\n            Reflect.apply(close, connection, []); // executar o método close com o Reflect.Apply para sobrepor contexto\n            connection = null;\n        }\n    }\n}\n"]}