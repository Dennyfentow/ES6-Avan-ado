{"version":3,"sources":["../../app-es6/services/NegociacoesService.js"],"names":["HttpService","ConnectionFactory","NegociacaoDao","Negociacao","NegociacoesService","_http","Promise","all","obterNegociacoesDaSemana","obterNegociacoesDaSemanaAnterior","obterNegociacoesDaSemanaRetrasada","then","negociacoes","periodos","reduce","dados","periodo","concat","obterNegociacoesDaSemanaHTTP","path","mensagemDeErro","get","map","Date","objeto","data","quantidade","valor","catch","console","log","erro","Error","negociacao","getConnection","connection","dao","adiciona","listaTodos","apagaTodos","listaAtual","obterNegociacoes","filter","some","isEquals","negociacaoExistentes"],"mappings":"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","file":"NegociacoesService.js","sourcesContent":["import {HttpService} from './HttpService';\nimport {ConnectionFactory} from './ConnectionFactory';\nimport {NegociacaoDao} from '../dao/NegociacaoDao';\nimport {Negociacao} from '../models/Negociacao';\nexport class NegociacoesService {\n\n    constructor() {\n        this._http = new HttpService();\n    }\n\n    obterNegociacoes() {\n        // Executa todas as promisses de uma vez e retona em apens um unico 'then' e 'catch', ficando mais fácil de lidar!\n        return Promise.all([\n            this.obterNegociacoesDaSemana(),\n            this.obterNegociacoesDaSemanaAnterior(),\n            this.obterNegociacoesDaSemanaRetrasada()\n        ]).then(periodos => {\n            // Como periodos retorna uma lista de listas, é necessário utilizar o método 'reduce' para concatenar as Promisseso\n            let negociacoes = periodos\n                .reduce((dados, periodo) => dados.concat(periodo), []);\n            return negociacoes;\n        });\n\n    }\n\n    obterNegociacoesDaSemana() {\n        return this.obterNegociacoesDaSemanaHTTP('negociacoes/semana', 'Não foi possível obter as negociações da semana');\n    }\n\n    obterNegociacoesDaSemanaAnterior() {\n        return this.obterNegociacoesDaSemanaHTTP('negociacoes/anterior', 'Não foi possível obter as negociações da semana anterior');\n    }\n\n    obterNegociacoesDaSemanaRetrasada() {\n        return this.obterNegociacoesDaSemanaHTTP('negociacoes/retrasada', 'Não foi possível obter as negociações da semana retrasada');\n    }\n\n    obterNegociacoesDaSemanaHTTP(path, mensagemDeErro) {\n        // Realiza a requisição HTTP e converte o retorno em objetos para que possam ser exibidos na View\n        return this._http.get(path)\n            .then(negociacoes => {\n                return negociacoes.map(objeto => new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor));\n            }).catch(erro => {\n                console.log(erro);\n                throw new Error(mensagemDeErro);\n            });\n    }\n\n    // CADASTRAR NO BANCO INDEXDB \n    cadastra(negociacao) {\n\n        return ConnectionFactory.getConnection()\n            .then(connection => new NegociacaoDao(connection))\n            .then(dao => dao.adiciona(negociacao))\n            .then(() => 'Negociação Adicionada com sucesso!')\n            .catch(erro => {\n                console.log(erro);\n                throw new Error('Não foi possível adicionar a negociação');\n            });\n    }\n\n    lista() {\n        return ConnectionFactory.getConnection()\n            .then(connection => new NegociacaoDao(connection))\n            .then(dao => dao.listaTodos())\n            .catch(erro => {\n                console.log(erro);\n                throw new Error('Não foi possível listar as negociações');\n            });\n    }\n\n    apaga() {\n        return ConnectionFactory.getConnection()\n            .then(connection => new NegociacaoDao(connection))\n            .then(dao => dao.apagaTodos())\n            .then(() => 'Negociações apagadas com sucesso!')\n            .catch(erro => {\n                console.log(erro);\n                throw new Error('Não foi possível apagar as negociações!');\n            })\n    }\n\n    importa(listaAtual) {\n        // Com o Some, conseguimos ter acesso a cada objeto da lista e verificar de maneira direta cada um dos objetos \n        // e então aplicar corretamente o filtro\n        // com isso, podemos utilizar o stringfy para tornar os objetos diretos e verificar seus conteudos, não seus ponteiros\n        return this.obterNegociacoes()\n            .then(negociacoes => negociacoes.filter(negociacao =>\n                !listaAtual.some(negociacaoExistentes =>\n                    negociacao.isEquals(negociacaoExistentes))\n            ));\n        // catch utilizado é o do método obterNegociacoesDaSemanaHTTP que vai para o obterNegociacoes (sem catch também),\n        // para evitar adicionar catchs sobre catchs, deixar apenas um catch funcionando\n    }\n\n}"]}