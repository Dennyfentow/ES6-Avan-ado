{"version":3,"sources":["../../app-es6/dao/NegociacaoDao.js"],"names":["Negociacao","NegociacaoDao","connection","_connection","_store","negociacao","Promise","resolve","reject","request","transaction","objectStore","add","onsuccess","onerror","console","log","e","target","error","requestClear","clear","cursor","openCursor","negociacoes","atual","result","dado","value","push","_data","_quantidade","_valor","continue"],"mappings":";;;;;;;;;;;;;;;AAAQA,sB,qBAAAA,U;;;;;;;;;;;;;;;;;;;;;qCAEKC,a;AACT,uCAAYC,UAAZ,EAAwB;AAAA;;AACpB,yBAAKC,WAAL,GAAmBD,UAAnB;AACA,yBAAKE,MAAL,GAAc,aAAd;AACH;;;;6CAEQC,U,EAAY;AAAA;;AACjB,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC;AACA,gCAAIC,UAAU,MAAKN,WAAL,CAAiB;AAAjB,6BACTO,WADS,CACG,CAAC,MAAKN,MAAN,CADH,EACkB,WADlB,EAC+B;AAD/B,6BAETO,WAFS,CAEG,MAAKP,MAFR,EAEgB;AAFhB,6BAGTQ,GAHS,CAGLP,UAHK,CAAd,CAHoC,CAMd;;AAEtBI,oCAAQI,SAAR,GAAoB,aAAK;AACrB;AACAN;AACH,6BAHD;;AAKAE,oCAAQK,OAAR,GAAkB,aAAK;AACnBC,wCAAQC,GAAR,CAAYC,EAAEC,MAAF,CAASC,KAArB;AACAX,uCAAO,0CAAP;AACH,6BAHD;AAIH,yBAjBM,CAAP;AAkBH;;;iDAEY;AAAA;;AACT,+BAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;AACpC,gCAAIY,eAAe,OAAKjB,WAAL,CAClBO,WADkB,CACN,CAAC,OAAKN,MAAN,CADM,EACS,WADT,EAElBO,WAFkB,CAEN,OAAKP,MAFC,EAGlBiB,KAHkB,EAAnB;;AAKAD,yCAAaP,SAAb,GAAyB;AAAA,uCAAKN,QAAQ,oCAAR,CAAL;AAAA,6BAAzB;AACAa,yCAAaN,OAAb,GAAuB,aAAK;AACxBC,wCAAQC,GAAR,CAAYC,EAAEC,MAAF,CAASC,KAArB;AACAX,uCAAO,0CAAP;AACH,6BAHD;AAIH,yBAXM,CAAP;AAYH;;;iDAEY;AAAA;;AACT,+BAAO,IAAIF,OAAJ,CAAY,UAACC,OAAD,EAAUC,MAAV,EAAqB;;AAEpC,gCAAIc,SAAS,OAAKnB,WAAL,CACRO,WADQ,CACI,CAAC,OAAKN,MAAN,CADJ,EACmB,WADnB,EAERO,WAFQ,CAEI,OAAKP,MAFT,EAGRmB,UAHQ,EAAb;;AAKA;AACA,gCAAIC,cAAc,EAAlB;;AAEAF,mCAAOT,SAAP,GAAmB,aAAK;AACpB;AACA,oCAAIY,QAAQR,EAAEC,MAAF,CAASQ,MAArB;;AAEA;AACA,oCAAID,KAAJ,EAAW;AACP,wCAAIE,OAAOF,MAAMG,KAAjB;AACAJ,gDAAYK,IAAZ,CAAiB,IAAI7B,UAAJ,CAAe2B,KAAKG,KAApB,EAA2BH,KAAKI,WAAhC,EAA6CJ,KAAKK,MAAlD,CAAjB;;AAEA;AACAP,0CAAMQ,QAAN;AACH,iCAND,MAMO;AACH;AACA1B,4CAAQiB,WAAR;AACH;AAEJ,6BAhBD;;AAkBAF,mCAAOR,OAAP,GAAiB,aAAK;AAClBC,wCAAQC,GAAR,CAAY,WAAWC,EAAEC,MAAF,CAASC,KAAhC;AACAX,uCAAO,yCAAP;AACH,6BAHD;AAIH,yBAhCM,CAAP;AAiCH","file":"NegociacaoDao.js","sourcesContent":["import {Negociacao} from '../models/Negociacao';\n\nexport class NegociacaoDao {\n    constructor(connection) {\n        this._connection = connection;\n        this._store = 'negociacoes';\n    }\n\n    adiciona(negociacao) {\n        return new Promise((resolve, reject) => {\n\n            // cria a transação e obtem conexão com o objectStore Negociações\n            let request = this._connection // encadeamento\n                .transaction([this._store], 'readwrite') // pegar a transação da conexão\n                .objectStore(this._store) // pega o objectStore\n                .add(negociacao); // adiciona uma Store.\n\n            request.onsuccess = e => {\n                // Negociação adicionada com sucesso!\n                resolve();\n            }\n\n            request.onerror = e => {\n                console.log(e.target.error);\n                reject('Não foi possível adicionar a negociação!');\n            };\n        });\n    }\n\n    apagaTodos() {\n        return new Promise((resolve, reject) => {\n            let requestClear = this._connection\n            .transaction([this._store], 'readwrite')\n            .objectStore(this._store)\n            .clear();\n            \n            requestClear.onsuccess = e => resolve('Negociações Removidas com Sucesso!');\n            requestClear.onerror = e => {\n                console.log(e.target.error);\n                reject('Não foi possível remover as negociações!');\n            }    \n        });\n    }\n\n    listaTodos() {\n        return new Promise((resolve, reject) => {\n\n            let cursor = this._connection\n                .transaction([this._store], 'readwrite')\n                .objectStore(this._store)\n                .openCursor();\n\n            // abre o cursor para iterar os dados do Banco\n            let negociacoes = [];\n\n            cursor.onsuccess = e => {\n                // retorna o ponteiro do primeiro dado do banco\n                let atual = e.target.result;\n\n                // se o ponteiro for valido, busca o dado pelo ponteiro e adiciona uma estancia no array\n                if (atual) {\n                    let dado = atual.value;\n                    negociacoes.push(new Negociacao(dado._data, dado._quantidade, dado._valor));\n\n                    // pula para o próximo ponteiro e reexecuta o onsucess!\n                    atual.continue();\n                } else {\n                    // ao final, exibe as negociações!\n                    resolve(negociacoes);\n                }\n\n            }\n\n            cursor.onerror = e => {\n                console.log('Error:' + e.target.error);\n                reject('Não foi possível listar as Negociações!');\n            };\n        });\n    }\n}"]}